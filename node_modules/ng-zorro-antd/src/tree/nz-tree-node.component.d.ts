import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnInit, Renderer2, TemplateRef } from '@angular/core';
import { Observable } from 'rxjs';
import { NzFormatBeforeDropEvent, NzFormatEmitEvent } from './interface';
import { NzTreeNode } from './nz-tree-node';
import { NzTreeService } from './nz-tree.service';
export declare class NzTreeNodeComponent implements OnInit, AfterViewInit {
    private nzTreeService;
    private ngZone;
    private renderer;
    dragPos: number;
    prefixCls: string;
    _treeNode: any;
    _expandAll: boolean;
    _defaultCheckedKeys: any[];
    _defaultExpandedKeys: any[];
    _defaultSelectedKeys: any[];
    _searchValue: string;
    matchValue: any[];
    dragPosClass: object;
    dragElement: ElementRef;
    nzShowLine: boolean;
    nzShowExpand: boolean;
    nzDraggable: boolean;
    nzMultiple: boolean;
    nzCheckable: boolean;
    nzAsyncData: any;
    nzCheckStrictly: boolean;
    nzTreeTemplate: TemplateRef<void>;
    nzBeforeDrop: (confirm: NzFormatBeforeDropEvent) => Observable<boolean>;
    nzTreeNode: NzTreeNode;
    nzDefaultExpandAll: boolean;
    nzDefaultExpandedKeys: string[];
    nzDefaultSelectedKeys: string[];
    nzSearchValue: string;
    readonly loadingStyle: {
        [key: string]: string;
    };
    clickNode: EventEmitter<NzFormatEmitEvent>;
    dblClick: EventEmitter<NzFormatEmitEvent>;
    contextMenu: EventEmitter<NzFormatEmitEvent>;
    clickCheckBox: EventEmitter<NzFormatEmitEvent>;
    clickExpand: EventEmitter<NzFormatEmitEvent>;
    nzDragStart: EventEmitter<NzFormatEmitEvent>;
    nzDragEnter: EventEmitter<NzFormatEmitEvent>;
    nzDragOver: EventEmitter<NzFormatEmitEvent>;
    nzDragLeave: EventEmitter<NzFormatEmitEvent>;
    nzDrop: EventEmitter<NzFormatEmitEvent>;
    nzDragEnd: EventEmitter<NzFormatEmitEvent>;
    constructor(nzTreeService: NzTreeService, ngZone: NgZone, renderer: Renderer2);
    ngOnInit(): void;
    handleDragStart(e: DragEvent): void;
    handleDragEnter(e: DragEvent): void;
    handleDragOver(e: DragEvent): void;
    handleDragLeave(e: DragEvent): void;
    handleDragDrop(e: DragEvent): void;
    handleDragEnd(e: DragEvent): void;
    ngAfterViewInit(): void;
    _clearDragClass(): void;
    _clickNode($event: MouseEvent, node: NzTreeNode): void;
    _dblClickNode($event: MouseEvent, node: NzTreeNode): void;
    _contextMenuNode($event: MouseEvent, node: NzTreeNode): void;
    _clickCheckBox($event: MouseEvent, node: NzTreeNode): void;
    _clickExpand($event: MouseEvent, node: NzTreeNode): void;
}
